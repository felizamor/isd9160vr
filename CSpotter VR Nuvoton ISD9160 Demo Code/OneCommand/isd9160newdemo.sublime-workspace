{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Fan",
				"Fan_Stauts"
			],
			[
				"flag",
				"VR_flag"
			],
			[
				"u8",
				"UINT8"
			],
			[
				"uint8",
				"UINT8"
			],
			[
				"vrti",
				"vr_time"
			],
			[
				"pw",
				"POWER"
			],
			[
				"cu",
				"CURRENT"
			],
			[
				"CALC",
				"CALC_DATA"
			],
			[
				"VBUS_c",
				"VBUS_CNVR"
			],
			[
				"ov",
				"VBUS_OVF"
			],
			[
				"vubs",
				"VBUS"
			],
			[
				"con",
				"CONF_DATA"
			],
			[
				"i2c",
				"i2c_read"
			],
			[
				"sla",
				"Slave_Address"
			],
			[
				"pri",
				"printf_P"
			],
			[
				"INIT",
				"INITSEG1"
			],
			[
				"chip",
				"chip_init_all"
			],
			[
				"def",
				"define"
			],
			[
				"clk",
				"CLK_chip_init2"
			],
			[
				"drive_clk",
				"drive_CLK_CFG_low"
			],
			[
				"ui",
				"uint8_t"
			],
			[
				"org",
				"org_addr"
			],
			[
				"data",
				"data_addr"
			],
			[
				"DATA",
				"data_addr"
			],
			[
				"de",
				"default"
			],
			[
				"uint",
				"uint8_t"
			],
			[
				"cha",
				"changetype"
			],
			[
				"uin",
				"uint8_t"
			],
			[
				"un",
				"uint16_t"
			],
			[
				"dri",
				"drive_ADC_CFG_low"
			],
			[
				"SP",
				"SPI_DEV"
			],
			[
				"CLK",
				"CLK_chip_reset"
			],
			[
				"S",
				"SPICMD_WRITE"
			],
			[
				"spi",
				"spi_cmd_match"
			],
			[
				"he",
				"helppage"
			],
			[
				"prin",
				"printchar"
			],
			[
				"p",
				"printchar"
			],
			[
				"add",
				"address"
			],
			[
				"re",
				"register"
			],
			[
				"ini",
				"initial"
			],
			[
				"SPI",
				"SPI_DEV"
			],
			[
				"ADC",
				"ADC1_init"
			],
			[
				"T",
				"Tx_SCFDE"
			],
			[
				"cnt",
				"cnt_data"
			],
			[
				"frq",
				"Freq_en"
			],
			[
				"rf",
				"rfic_initclk"
			],
			[
				"rfic_cfgen_f",
				"rfic_cfgen_ff1"
			],
			[
				"rfic",
				"rfic_cfgen"
			],
			[
				"rf_cfg",
				"rfic_cfgen_ff0"
			],
			[
				"rfi",
				"rfic_cfgen"
			],
			[
				"Fr",
				"Fre_en"
			],
			[
				"wire",
				"wire"
			],
			[
				"spen",
				"sp_en"
			],
			[
				"da",
				"dataout_rfic"
			],
			[
				"riiclkff",
				"rfic_initclk_out_ff"
			],
			[
				"a",
				"always\talways"
			],
			[
				"addr",
				"ADDR"
			],
			[
				"TX",
				"TX_GAIN_INIT"
			],
			[
				"F",
				"Freq_en"
			],
			[
				"lmsoutte",
				"lms_coeff_out0_temp"
			],
			[
				"lmsadd",
				"LMS_COEFF_0_2_ADDR"
			],
			[
				"lmscoad",
				"LMS_COEFF_0_2_ADDR"
			],
			[
				"lmswi",
				"LMS_COEFF_PHY_WIDTH"
			],
			[
				"pown",
				"pow_null_out_temp"
			],
			[
				"pow",
				"pow_null_out_temp"
			],
			[
				"POW",
				"POW_NULL_INIT"
			],
			[
				"LMSST",
				"LMS_STEP_WIDTH"
			],
			[
				"LMS",
				"LMS_COEFF_0_2_ADDR"
			],
			[
				"dout_da",
				"dout_i_da"
			],
			[
				"b",
				"b0"
			],
			[
				"h1",
				"h1"
			],
			[
				"opre1out",
				"optional_reg1_out"
			],
			[
				"opretemp",
				"optional_reg1_out_temp"
			],
			[
				"puintff",
				"PU_INT_STATUS_IN_FF"
			],
			[
				"PU_INT_ST",
				"PU_INT_STATUS_INIT"
			],
			[
				"pustau",
				"PU_INT_STATUS_WIDTH"
			],
			[
				"mapuptcnt",
				"MAP_UPDATE_CNT_ADDR"
			],
			[
				"fecff",
				"FEC_TOTAL_ID_CNT_DATA_IN_FF"
			],
			[
				"pdlostint",
				"PD_LOST_INT_CNT_ADDR"
			],
			[
				"ofdmbitwith",
				"OFDM_BIT_T_PHY_ADDR_WIDTH-1"
			],
			[
				"ddlsphdatawi",
				"DD_LS_SUMX2_PHY_DATA_WIDTH-1"
			],
			[
				"ddlssumxdatawi",
				"DD_LS_SUMX_PHY_DATA_WIDTH-1"
			],
			[
				"ddlsdatawi",
				"DD_LS_IND_PHY_DATA_WIDTH"
			],
			[
				"ofdmbittdatawi",
				"OFDM_BIT_T_PHY_DATA_WIDTH-1"
			],
			[
				"pilotse",
				"PILOT_C_PHASE_selected"
			],
			[
				"hip",
				"hiphy_time"
			],
			[
				"stp",
				"stp_on"
			],
			[
				"stpwi",
				"STP_EN_WIDTH"
			],
			[
				"staddr",
				"STP_REG_ADDR"
			],
			[
				"stsrc",
				"stp_src_sel_out_temp"
			],
			[
				"stp_sr",
				"stp_src_sel_out_temp"
			],
			[
				"stpbit",
				"STP_END_BIT"
			],
			[
				"st",
				"stp_end_in"
			],
			[
				"STPEND",
				"STP_END_IN_FF"
			],
			[
				"ampmovedon",
				"amp_ram_move_done_in"
			],
			[
				"phasenouttem",
				"phase_ram_move_en_out_temp"
			],
			[
				"amprammovoutt",
				"amp_ram_move_id_out_temp"
			],
			[
				"ampen",
				"AMP_RAM_MOVE_EN_INIT"
			],
			[
				"ampidout",
				"amp_ram_move_id_out_temp"
			],
			[
				"amp",
				"amp_parameter_out_temp"
			],
			[
				"ampmovdon",
				"AMP_RAM_MOVE_DONE_BIT"
			],
			[
				"AMPmove_d",
				"AMP_RAM_MOVE_DONE_IN_FF"
			],
			[
				"moveid",
				"MOVE_ID_ADDR"
			],
			[
				"phasemovedon",
				"PHASE_RAM_move_DONE"
			],
			[
				"AMP_RAM_move",
				"AMP_RAM_move_EN"
			],
			[
				"amp_",
				"amp_ram_move_done_in"
			],
			[
				"AMPmov",
				"AMP_RAM_move_EN"
			],
			[
				"phasewi",
				"PHASE_RAM_MOVE_ID_WIDTH"
			],
			[
				"ampwi",
				"AMP_RAM_MOVE_ID_WIDTH"
			],
			[
				"d",
				"d10000"
			],
			[
				"move",
				"AMP_move_flag_ff"
			],
			[
				"hiphy",
				"hiphy_time"
			],
			[
				"amp_moveaddr",
				"AMP_RAM_move_Base_addr"
			],
			[
				"AM",
				"AMP_addr_cnt"
			],
			[
				"Amp",
				"AMP_addr_cnt"
			],
			[
				"cpurdata",
				"cpu_rdata_AMP_RAM"
			],
			[
				"cpur",
				"cpu_rdata_AMP_RAM"
			],
			[
				"clk_hiphy_",
				"clk_hiphy_ff"
			],
			[
				"hiph",
				"hiphy_adc_i"
			],
			[
				"H",
				"HIPHY_ADC_DATA_WIDTH"
			],
			[
				"s",
				"stp_on"
			],
			[
				"clk_hi",
				"clk_hiphy"
			],
			[
				"r_fre_corr_out_",
				"r_fre_corr_out_temp"
			],
			[
				"t_fre_out_",
				"t_fre_out_temp"
			],
			[
				"esti_in_use_",
				"esti_in_use_out_temp"
			],
			[
				"clk_",
				"clk_hiphy"
			],
			[
				"fre_",
				"fre_delta"
			],
			[
				"r_ppm",
				"r_ppm_esti_data_in"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/*---------------------------------------------------------------------------------------------------------*/\n/*                                                                                                         */\n/* Copyright(c) Nuvoton Technology Corp. All rights reserved.                                              */\n/*                                                                                                         */\n/*---------------------------------------------------------------------------------------------------------*/\t\t \n\n// ---------------------------------------------------------------------------------------------------------\n//\tFunctions:\n//\t\t- System clock configuration.\n//\t\t- Keypad configuration.\n//\t\t- SPI Flash configuration.\n//\t\t- Speaker configuration.\n//\t\t- MIC configuration.\n//\t\t- Output pin configuration.\n//\t\t- UltraIO configuration.\n//\t\t- Application Initiation.\n//\t\t- Processing loop:\n//\t\t\t* Codec processing(use functions in \"AppFunctions.c\").\n//\t\t\t* Voice effect processing(use functions in \"AppFunctions.c\").\n//\t\t\t* Keypad check and execution actions(use functions in \"InputKeyActions.c\").\n//\t\t\t* Etc.\n//\t\n//\tReference \"Readme.txt\" for more information.\n// ---------------------------------------------------------------------------------------------------------\n\n#include <stdio.h>\n#include \"App.h\"\n#include \"Framework.h\"\n#include \"Keypad.h\"\n#include \"ConfigSysClk.h\"\n#include \"MicSpk.h\"\n\n#include \"AudioRes/Output/AudioRes_AudioInfo.h\"\n\n//#include \"N5162S.h\"\n//#include \"gpio_spi.h\"\n\n#if( !defined(__CHIP_SERIES__) )\n#error \"Please update SDS version >= v5.0.\"\n#endif\n\n// SPI flash handler.\nS_SPIFLASH_HANDLER g_sSpiFlash;\n\n// Application control.\nvolatile UINT8 g_u8AppCtrl;\n\n// Application handler.\nS_APP g_sApp;\n\nstatic UART_T\t*g_pUART = UART0;                              /////modify 20170804\n\n\nuart_type ap_uart0;\npwm_type pwm0;\npwm_type pwm1;\n\nUINT8 SPIFlash_Initiate(void)\n{ \n\tUINT16 ui16Temp;\n\tUINT32 ui32Temp;\n\tUINT32 u32Count;\n\n\t// SPI0: GPA1=SSB00, GPA2=SCLK0, GPA3=MISO0, GPA4=MOSI0 \n\tSYS->GPA_MFP  = \n\t\t(SYS->GPA_MFP & (~(SYS_GPA_MFP_PA0MFP_Msk|SYS_GPA_MFP_PA1MFP_Msk|SYS_GPA_MFP_PA2MFP_Msk|SYS_GPA_MFP_PA3MFP_Msk)) )\n\t\t| (SYS_GPA_MFP_PA0MFP_SPI_MOSI0|SYS_GPA_MFP_PA1MFP_SPI_SCLK|SYS_GPA_MFP_PA2MFP_SPI_SSB0|SYS_GPA_MFP_PA3MFP_SPI_MISO0);\t\n\t\n\t// Reset IP module\n\tCLK_EnableModuleClock(SPI0_MODULE);\n\tSYS_ResetModule(SPI0_RST);\n\tSPIFlash_Open(SPI0, SPI_SS0, SPI0_CLOCK, &g_sSpiFlash );\n\n\t// Make SPI flash leave power down mode if some where or some time had made it entring power down mode\n\tSPIFlash_PowerDown(&g_sSpiFlash, FALSE);\n\t\n\t// Check SPI flash is ready for accessing\n\tu32Count = ui32Temp = 0;\n\twhile(u32Count!=100)\n\t{\n\t\tSPIFlash_Read(&g_sSpiFlash, 0, (PUINT8) &ui16Temp, 2);\n\t\tif ( ui32Temp != (UINT32)ui16Temp )\n\t\t{\n\t\t\tui32Temp = (UINT32)ui16Temp;\n\t\t\tu32Count = 0;\n\t\t}\n\t\telse\n\t\t\tu32Count++;\n\t}\n\n\t// The following code can be remove to save code if the flash size is not necessary for this application\n\tSPIFlash_GetChipInfo(&g_sSpiFlash);\n\tif (g_sSpiFlash.u32FlashSize == 0)\n\t\treturn 0;\n\t\n\t// The above code can be remove to save code if the flash size is not necessary for this application\n\treturn 1;\n}\n\nvoid UART_Init(void)\n{\n   /* Init UART to 115200-8n1 for print message */\n\tSYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA8MFP_Msk) ) | SYS_GPA_MFP_PA8MFP_UART_TX;\n\tSYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA9MFP_Msk) ) | SYS_GPA_MFP_PA9MFP_UART_RX;\n\t\n\tCLK_EnableModuleClock(UART_MODULE);//使能UART外设时钟\n\t\n  UART_Open(UART0, 115200);\n\tUART_ClearIntFlag(UART0,UART_INTSTS_BUFERRINT_Msk);\n\tUART_ClearIntFlag(UART0,UART_INTSTS_RLSINT_Msk);\n\tUART_ClearIntFlag(UART0,UART_INTSTS_MODEMINT_Msk);\n\tUART_ClearIntFlag(UART0,UART_INTSTS_RXTOINT_Msk);\n\tUART0->INTEN |=(1<<0); //使能接收中断\n  NVIC_EnableIRQ(UART0_IRQn);                      ////modify 20170804 \n}\n\nvoid pwm_init(void)\n{\n\tpwm0.period = PWM_PERIOD;\n\tpwm0.rate = PWM_RATE;\n\tpwm0.Duty = 0;\n/*  \tif (USE_PWM0)\n  \t{\n\t\tpwm0.Duty = PWM_DUTY_INIT;\n\t}\n\telse\n\t{\n\t\tpwm0.Duty = 0;\n\t}\n*/\t\n\n\tCLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0CH01SEL_HCLK, 0);\n\tCLK_EnableModuleClock(PWM0_MODULE);\n\tSYS_ResetModule(PWM0_RST);\n\t\n\t// Set GPA multi-function pins for PWM0 Channel0\n\tSYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA12MFP_Msk) ) | SYS_GPA_MFP_PA12MFP_PWM0CH0;\n\t//set PWM0 channel 0 output configuration \n  \tPWM_ConfigOutputChannel(PWM0, PWM_CH0, pwm0.rate, pwm0.Duty);\n  \t//Enable PWM Output path for PWM0 channel 0 \n  \tPWM_EnableOutput(PWM0, 0x1);\n\t// Enable PWM channel 0 period interrupt\n\tPWM0->INTEN |= PWM_INTEN_PIEN0_Msk;\n\tNVIC_EnableIRQ(PWM0_IRQn);\n\t  \n\tPWM_Start(PWM0, 0x01);\n\n  \tif (USE_PWM1)\n  \t{\n\t\tpwm1.period = PWM_PERIOD;\n\t\t// pwm1.Duty = PWM_DUTY_INIT;\n\t\tpwm1.Duty = 0;\n\t\tpwm1.rate = PWM_RATE;\n\t\tPWM_DisableDeadZone(PWM0, 0);\n\t\t// Set GPA multi-function pins for PWM0 Channel1\n\t\tSYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA13MFP_Msk) ) | SYS_GPA_MFP_PA13MFP_PWM0CH1;\n\t\t//set PWM0 channel 1 output configuration \n\t\tPWM_ConfigOutputChannel(PWM0, PWM_CH1, pwm1.rate, pwm1.Duty);\n\t\t//Enable PWM Output path for PWM0 channel 0 and channel 1 \n\t\tPWM_EnableOutput(PWM0, 0x2);\n\t\t// Enable PWM channel 1 period interrupt\n\t\tPWM0->INTEN |= PWM_INTEN_PIEN1_Msk;\n\t\tPWM_Start(PWM0, 0x02);\n  \t}\n\t// PWM_Start(PWM0, 0x03);\n\t//GPIO_SET_OUT_DATA(PA, GPIO_GET_OUT_DATA(PA) & (~BIT12));\n}\n/*\nvoid pwm_init_1(void)\n{\n\tpwm1.period =200;\n\tpwm1.Duty =50;\n\tpwm1.rate = 30000;\n\t\n\tCLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0CH01SEL_HCLK, 0);\n\tCLK_EnableModuleClock(PWM0_MODULE);\n\tSYS_ResetModule(PWM0_MODULE);\n\t\n\t// Set GPA multi-function pins for PWM0 Channel1 \n\tSYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA13MFP_Msk) ) | SYS_GPA_MFP_PA13MFP_PWM0CH1;\n\t//set PWM0 channel 1 output configuration \n  PWM_ConfigOutputChannel(PWM0, PWM_CH1, pwm1.rate, pwm1.Duty);\n  //Enable PWM Output path for PWM0 channel 1 \n  PWM_EnableOutput(PWM0, 0x2);\n\t// Enable PWM channel 1 period interrupt\n  PWM0->INTEN = PWM_INTEN_PIEN1_Msk;\n  NVIC_EnableIRQ(PWM0_IRQn);\n    \n  PWM_Start(PWM0, 0x00);\n}*/\n\nvoid time_init(void)\n{\n\tCLK_EnableModuleClock(TMR0_MODULE);  //使能time0外设时钟\n\tCLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HCLK, 0);   /////modify 20170804\n\tTIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 1000);\n\tNVIC_EnableIRQ(TMR0_IRQn);\n\tTIMER_Start(TIMER0);\n\tTIMER_EnableInt(TIMER0);\n\t\n}\n\nuint16_t vr_time=0;\nuint16_t main_init_time=2000;\nuint8_t spk_sta=0;\nuint16_t PB_PIN_STA=0;\nvoid TMR0_IRQHandler(void)\n{\n\tstatic uint8_t time_10ms=0;\n\n\tstatic uint16_t tt=0;\n\tstatic uint8_t ll=0;\n\tif(pwm0.Breath_light)\n\t{\n\t\ttt++;\n\t\tif(tt>10)\n\t\t{\n\t\t\ttt =0;\n\t\t\tif(ll==0)\n\t\t\t{\n\t\t\t\tpwm0.Duty ++;\n\t\t\t\tif((pwm0.Duty)>= pwm0.period) ll=1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(pwm0.Duty)\tpwm0.Duty--;\n\t\t\t\telse ll=0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(time_10ms)\ttime_10ms--;\n\telse\n\t{\n\t\ttime_10ms=10;\n\t\t\n\t\tPB_PIN_STA <<=1;\n\t\tif(((PB->PIN)&(1<<6))==0)\tPB_PIN_STA+=1;\n\t\t\n\t\tif (PB_PIN_STA==0xfF00)\tspk_sta++;\n\t}\n\t\n\tif(ap_uart0.uart_rx_time)\tap_uart0.uart_rx_time --;\n    //printf(\"Timer IRQ handler test #%d/3.\\n\", ++u8Counter );\n    TIMER_ClearIntFlag(TIMER0);\t\n\tif(vr_time)\tvr_time--;\n}\n\nvoid UART0_IRQHandler(void)   ////modify 20170804\n{\n\tuint32_t  u32IntStatus;\n\tu32IntStatus= UART0->INTSTS;\n\t\nif(u32IntStatus & (1<<0))\t//接收中断\n\t{\n\t\tap_uart0.uart_rx_data[ap_uart0.uart_rx_len] = UART0->DAT;\n\t\tif((ap_uart0.uart_rx_len+1) <UART_DA)\tap_uart0.uart_rx_len ++;\t//预防越界\n\t\t\n\t\tap_uart0.uart_rx_time = UART_TT;\n\t}\n\telse if(u32IntStatus & (1<<1))\t//发送缓冲空中断\n\t{\n\t\tUART0->INTEN &= ~(1<<1);     /////THREIEN\n\t\tif(ap_uart0.uart_tx_len)\n\t\t{\n\t\t\tUART0->DAT= ap_uart0.uart_tx_data[ap_uart0.uart_tx_per]  ;\n\t\t\tap_uart0.uart_tx_len--;\n\t\t\tap_uart0.uart_tx_per ++;\n\t\t\tUART0->INTEN |=(1<<1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tap_uart0.uart_tx_per =0;\n\t\t\tUART0->INTEN &= ~(1<<1);\t\t//发送完毕，关闭发送中断\n\t\t\t//UART0->INTEN |=(1<<1);\n\t\t}\n\t}\n\n} \n\nvoid uart_send(uint8_t *dara, uint16_t len)\n{\n\tuint16_t ii;\n\tUART0->INTEN |=(1<<1);\n\tfor(ii=0; ii<len; ii++)\n\t{\n\t\tap_uart0.uart_tx_data[ii] = *dara++;\n\t}\n\tap_uart0.uart_tx_len =len;\n\tif(ap_uart0.uart_tx_len==0)\treturn;\n\twhile((g_pUART->FIFOSTS &(1<<22)) == 0)\t;\n\tg_pUART->DAT= ap_uart0.uart_tx_data[0];//发送\n\tap_uart0.uart_tx_per++;\n\tap_uart0.uart_tx_len --;\n\tUART0->INTEN |=(1<<1);\t//打开发送中断\n}\n\n\nvoid uart_rev_task(void)\n{\n\tif((ap_uart0.uart_rx_time==0)&&(ap_uart0.uart_rx_len))//有接收到数据\n\t{\n\n\t\t//uart_send(ap_uart0.uart_rx_data\t, ap_uart0.uart_rx_len);\t//发送接收到的数据\n\n\t\tap_uart0.uart_rx_len =0;\n\t}\n}\n\n\n\nvoid PWM0_IRQHandler(void)\n{\n\tif (PWM_GetIntFlag(PWM0, PWM_CH0))\n\t{\n    \t// Update PWM0 channel 0 period and duty\n    \tPWM_SET_CNR(PWM0, PWM_CH0, pwm0.period);\n    \tPWM_SET_CMR(PWM0, PWM_CH0, pwm0.Duty);\n    \t// Clear channel 0 period interrupt flag\n    \tPWM_ClearIntFlag(PWM0, PWM_CH0);\n\t}\n\tif(USE_PWM1)\n\t{\n\t\tif (PWM_GetIntFlag(PWM0, PWM_CH1))\n\t\t{\n\t    \t// Update PWM0 channel 1 period and duty\n\t    \tPWM_SET_CNR(PWM0, PWM_CH1, pwm1.period);\n\t    \tPWM_SET_CMR(PWM0, PWM_CH1, pwm1.Duty);\n\t    \t// Clear channel 0 period interrupt flag\n\t    \tPWM_ClearIntFlag(PWM0, PWM_CH1);\n\t\t}\n\t}\n}\n\n\n\nuint8_t spk_add=0;\nuint8_t key_spk;\nuint8_t io_aa;\nuint8_t Fan_Stauts = 0;\n//---------------------------------------------------------------------------------------------------------\n// Main Function                                                           \n//---------------------------------------------------------------------------------------------------------\nINT32 main()\n{\n\n\tSYSCLK_INITIATE();\t\t\t\t\t\t\t\t// Configure CPU clock source and operation clock frequency.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The configuration functions are in \"ConfigSysClk.h\"\n\n\tCLK_EnableLDO(CLK_LDOSEL_3_3V);\t\t// Enable interl 3.3 LDO.\n\n\tif (! SPIFlash_Initiate())\t\t\t\t// Initiate SPI interface and checking flows for accessing SPI flash.\n\twhile(1); \t\t\t\t\t\t\t\t\t\t\t\t// loop here for easy debug\n\t\n\n\tOUTPUTPIN_INITIATE();\t\t\t\t\t\t\t// Initiate output pin configuration.\n//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The output pins configurations are defined in \"ConfigIO.h\".\n\n\tULTRAIO_INITIATE();\t\t\t\t\t\t\t\t// Initiate ultraio output configurations.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The ultraio output pin configurations are defined in \"ConfigUltraIO.h\"\n\n\tKEYPAD_INITIATE();\t\t\t\t\t\t\t\t// Initiate keypad configurations including direct trigger key and matrix key\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The keypad configurations are defined in \"ConfigIO.h\".\n\n\tPDMA_INITIATE();\t\t\t\t\t\t\t\t\t// Initiate PDMA.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// After initiation, the PDMA engine clock NVIC are enabled.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Use PdmaCtrl_Open() to set PDMA service channel for desired IP.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Use PdmaCtrl_Start() to trigger PDMA operation.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Reference \"PdmaCtrl.h\" for PDMA related APIs.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// PDMA_INITIATE() must be call before SPK_INITIATE() and MIC_INITIATE(), if open MIC or speaker.\n\n\tSPK_INITIATE();\t\t\t\t\t\t\t\t\t\t// Initiate speaker including pop-sound canceling.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// After initiation, the APU is paused.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Use SPK_Resume(0) to start APU operation.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Reference \"MicSpk.h\" for speaker related APIs.\n\n\tMIC_INITIATE();\t\t\t\t\t\t\t\t\t\t// Initiate MIC.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// After initiation, the ADC is paused.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Use ADC_Resume() to start ADC operation.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Reference \"MicSpk.h\" for MIC related APIs.\n\n\n\tUART_Init();   \n\ttime_init();\n\tpwm_init();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n//\t\t\t\n\tApp_Initiate();\t\t\t\t\t\t\t\t\t\t// Initiate application for audio decode.\n\t\n//\tGPIO_SetMode(PA, 12, GPIO_MODE_OUTPUT);\n\t\n\t//App_StartPlay(0);\n\tprintf(\"\\n\\n\");\n\tprintf(\"INIT Finished!\\n\");\n\tprintf(\"Starting VR...\\n\");\n\twhile (1)\n\t{\n\t\t\n\t\tApp_Process();\t//语音识别\n\t\tuart_rev_task();\t//uart任务\n\t\t\n\t\t\n\t\t//if((g_u8AppCtrl & APPCTRL_PLAY)==0)\t App_StartPlay(1);\t//判断当前是否播放完毕\n\t\t\n\t\t\n//\t\tTRIGGER_KEY_CHECK();\t\t// Check and execute direct trigger key actions defined in \"InputKeyActions.c\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Default trigger key handler is \"Default_KeyHandler()\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The trigger key configurations are defined in \"ConfigIO.h\".\n\t\t\n//\t\tMATRIX_KEY_CHECK();\t\t\t// Check and execute matrix key actions defined in \"InputKeyActions.c\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Default matrix key handler is \"Default_KeyHandler()\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The matrix key configurations are defined in \"ConfigIO.h\".\n\t}\n\n}\n\n",
			"file": "main.c",
			"file_size": 12672,
			"file_write_time": 131877557145829736,
			"settings":
			{
				"buffer_size": 12095,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "AppFunctions.c",
			"settings":
			{
				"buffer_size": 15251,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 35.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Package Control: de",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"Package Control: up",
				"Package Control: Upgrade Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: isn",
				"Package Control: Install Package"
			]
		],
		"width": 504.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/src",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand"
	],
	"file_history":
	[
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/App.h.dump",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/App.h",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AppCallback.c",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Storage/inc/SPIFlash.h",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Framework/src/AudioRom.c",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/MD4App/MD4App.c",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Device/Nuvoton/ISD9100/Include/ISD9100.h",
		"/E/shovelhpwork/hinoc/id_rsa.lyuyi.pub",
		"/E/shovelhpwork/hinoc/interface_128M/interface/cache.v",
		"/E/shovelhpwork/hinoc/interface_128M/interface/interface_top.v",
		"/E/shovelhpwork/hinoc/RF配置模块相关/rf_ctr_code/soc/en1460_sio.v",
		"/E/shovelhpwork/hinoc/RF配置模块相关/rf_ctr_code/soc/rf_ctr_en1460.v",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/src/pwm.c",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/inc/pwm.h",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/main.c",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AudioRes/Output/AudioResText.h",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/inc/clk.h",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/src/clk.c",
		"/C/Nuvoton/ISD91XX_SDK/NuvotonPlatform_Keil/Sample/Driver/Smpl_DrvPWM/Smpl_DrvPWM.c",
		"/C/Nuvoton ISD9100 SDS/V5.02.001/SampleCode/StdDriver/PWM/KEIL/startup_ISD9100.s",
		"/F/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/ConfigUltraIO.h",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AppFunctions.c",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/gpio_spi.c",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AudioRes/Output/AudioResText.h",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/inc/pwm.h",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/src/pwm.c",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/.tags",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AudioRes/AudioRes.uid",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AudioRes/1.txt",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AudioRes/Output/AudioRes_AudioInfo.h",
		"/F/shovelhp/Downloads/NuvotonISD9160/ISD9160_VR语音识别_2018年4月3日/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AppFunctions.c",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AppFunctions - Origin.c_BACK",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AudioRes/AudioRes.wba",
		"/C/Nuvoton ISD9100 SDS/V5.02.001/SampleCode/Template/main.c",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/App.h",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/ConfigIO.h",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Framework/src/ConfigIO.c",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Framework/inc/Framework.h",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Device/Nuvoton/ISD9100/Include/ISD9100.h",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Device/Nuvoton/ISD9100/Source/ARM/startup_ISD9100.s",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/Library/CMSIS/DSP_Lib/Examples/Common/ARM/startup_ARMCM0.s",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/ConfigSysClk.h",
		"/C/Nuvoton/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Framework/src/MicSpk.c",
		"/C/Nuvoton/BSP Library/ISD9100BSP_CMSIS_V3.01.001/SampleCode/StdDriver/Uart/main.c",
		"/C/Nuvoton/ISD91XX_SDK/NuvotonPlatform_Keil/Sample/TestOK/LightDemo_RecordG722__3VP_Touch-1pad/src/PlaySpiG722.c",
		"/C/Nuvoton/ISD91XX_SDK/NuvotonPlatform_Keil/Sample/TestOK/LightDemo_RecordG722__3VP_Touch-1pad/src/PlaySpiSiren7_key.c",
		"/C/Nuvoton/ISD91XX_SDK/NuvotonPlatform_Keil/Sample/TestOK/LightDemo_RecordG722__3VP_Touch-1pad/src/RecordSpiG722.c",
		"/C/Nuvoton/ISD91XX_SDK/NuvotonPlatform_Keil/Sample/TestOK/LightDemo_RecordG722__3VP_Touch-1pad/src/Recording.c",
		"/C/Program Files (x86)/Nuvoton/ISD9xxx/ISD91XX_SDK/NuvotonPlatform_Keil/Sample/TestOK/CheckVRID/CheckVRID.c",
		"/C/Nuvoton/ISD91XX_SDK/NuvotonPlatform_Keil/Sample/TestOK/LightDemo_RecordG722__3VP_Touch-1pad/src/main.c",
		"/C/Program Files (x86)/Spirent Communications/Spirent TestCenter 4.38/Spirent TestCenter Application/API/Tcl/readme.txt",
		"/D/pkgIndex.tcl",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/cmdres.c",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/chipinit.c",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/include/adc1_init_cfg.h",
		"/Z/ghp/temp/ina220/ina220.txt",
		"/F/softwares/专业软件/keysight/ScopeBinaryToMatlabBinaryExamples/importAgilentBin.m",
		"/F/softwares/专业软件/keysight/ScopeBinaryToMatlabBinaryExamples/myFileName.bin",
		"/F/softwares/专业软件/keysight/ScopeBinaryToMatlabBinaryExamples/points10.bin",
		"/D/Program Files (x86)/Sublime Text 3/Data/Packages/HexViewer/hex_viewer.sublime-settings",
		"/Z/ghp/temp/flash测试波形/analog/scope_25.bin",
		"/F/softwares/专业软件/keysight/ScopeBinaryToMatlabBinaryExamples/headerSize",
		"/D/Program Files (x86)/Sublime Text 3/Data/Packages/Git/Git.sublime-settings",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/main.c",
		"/R/forZTE/20170623/PON/SCFDE_PON_SSB.vtmu_pack/Resources/Tx_SCFDE.vtmg_pack/Inputs/Tx_SCFDE.m",
		"/Z/ghp/temp/RF滤波器带宽/Save0x0000000.dfl",
		"/C/Program Files (x86)/Spirent Communications/Spirent TestCenter 4.38/Spirent TestCenter Application/Tcl/lib/stc2.0/pkgIndex.tcl",
		"/C/Program Files (x86)/Spirent Communications/Spirent TestCenter 4.38/Spirent TestCenter Application/API/Tcl/SpirentTestCenter.tcl",
		"/C/Program Files (x86)/Spirent Communications/Spirent TestCenter 4.38/Spirent TestCenter Application/API/Tcl/pkgIndex.tcl",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/include/clk_chip_cfg.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/include/chipinit.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/include/cmdres.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/include/dispstr.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/include/adc2_init_cfg.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/include/atmel_start_pins.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/clk_chip_cfg.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/adc1_init_cfg.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/adc2_init_cfg.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/cmdres.h",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/chipinit.h",
		"/E/shovelhpwork/hinoc/cpu/hinoc2arc/board/debug.c",
		"/E/shovelhpwork/hinoc/MCU/ADCCTRL/ADCCTRL/ADCCTRL/main_cmd0.c",
		"/C/quartusprj/HINOC_195/FPGA_SOC_TOP_mulWlh5_nodiv_newHimac_mdio_phy_0415_ldpc_rftest/FPGA_SOC_TOP.qsf",
		"/E/shovelhpwork/hinoc/cpu/Hi401_ctrl/spi.txt",
		"/E/shovelhpwork/hinoc/cpu/pllswitch/sw_pll/boot_spi.c",
		"/Z/#Test/201711江苏信道测试/数据/分支分配器/201711JSYX/NJ-JKXC-S11.set",
		"/Z/IC_design_group/DINI/DNIOB_SFP/DNIOB_SFP/5SGXEAB_N2_C3/fpga_a.rbf",
		"/E/shovelhpwork/quartus/Dini_En1460_pku_daclkout/Dini_En1460_pku.qsf",
		"/E/shovelhpwork/quartus/EP4CE30F23C6_en1460_rc1_0820_ChangeFreq_FilterAdj_IQCorrect/RFXIAO_TEST.qsf",
		"/C/quartusprj/HINOC_195/FPGA_SOC_TOP_mulWlh5_nodiv_newHimac_mdio_phy_0415_ldpc/HINOC_TOP_Entropic_RF.qsf",
		"/C/quartusprj/HINOC_195/FPGA_SOC_TOP_mulWlh5_nodiv_newHimac_mdio_phy_0415_ldpc/HINOC_TOP_PKU_RF.qsf",
		"/C/quartusprj/HINOC_195/FPGA_SOC_TOP_mulWlh5_nodiv_newHimac_mdio_phy_0415_ldpc/HINOC_TOP_INTER_A.qsf",
		"/E/shovelhpwork/hinoc/s5gxboard/DNS5GX_F2/FPGA_Reference_Designs/boards/dn0237_dns5gx_f2/MainRef/IOB_Boards/dniob_qsfp_common.qsf",
		"/E/shovelhpwork/hinoc/s5gxboard/DNS5GX_F2/FPGA_Reference_Designs/boards/dn0237_dns5gx_f2/MainRef/PROJECTS/fpga_a.qsf",
		"/E/shovelhpwork/hinoc/s5gxboard/DNS5GX_F2/FPGA_Reference_Designs/boards/dn0237_dns5gx_f2/MainRef/PROJECTS/fpga_b.qsf",
		"/Z/ywy/Mifi.mif",
		"/E/shovelhpwork/Dr/科学研究方法与实践/latex作业/中文论文.tex",
		"/I/COM6_2_15_10_13_2 (2).txt",
		"/Z/ghp/Dr/amcc/log20170207/20170204pon_ratio20to0_rate100to500_cl0to35_len16x_nofec.log",
		"/Z/ghp/Dr/amcc/logAMCC/amcc_16x_ratio_speed_cl0to35_nofec_rcos.log",
		"/Z/#挂网数据/channel data/telnetlog/telnet",
		"/Z/#挂网数据/channel data/telnet",
		"/Z/ghp/Dr/amcc/logAMCC/sweep_amcc_fec_rcos_speed2.log",
		"/E/shovelhpwork/matlab/amcc/PON/SCFDE/Tx_SCFDE/Tx_SCFDE.m",
		"/E/shovelhpwork/matlab/数字通信/2/homework2_2.m",
		"/E/shovelhpwork/matlab/数字通信/2/homework2_1.m",
		"/E/shovelhpwork/matlab/amcc/PON/SCFDE/Rx_SCFDE/data_map.m",
		"/E/shovelhpwork/matlab/数字通信/2/homework4_1.m",
		"/Z/ghp/Dr/amcc/logAMCC/sweep_apd_cl9to35_ratio18to27_speed_len16x_nofec_hpf30k.log",
		"/Z/ghp/Dr/amcc/logPON/sweep_cl30to35_ratio18to30_rate100to500_len8x_nofec_hpf30k.log",
		"/Z/ghp/Dr/amcc/logPON/sweep_cl9to35_ratio18to30_rate100to500_len8x_nofec_hpf30k.log",
		"/Z/ghp/Dr/amcc/logAMCC/sweep_apd_cl9to35_ratio18to27_speed_len16x_fec0_hpf30k.log",
		"/Z/ghp/Dr/amcc/logPON/sweep_cl15to30_ratio18to30_rate100to500_len16x_nofec.log",
		"/Z/ghp/Dr/amcc/logAMCC/sweep_amcc_fec_rcos_speed.log",
		"/Z/ghp/Dr/amcc/logPON/testdata2.txt",
		"/Z/ghp/Dr/amcc/logPON/testdata.txt",
		"/R/PON1/SCFDE_PON_SSB.vtmu_pack/Reports/sweep_ratio_20to50_lpf_1to3_len8x4096x32_newlaser.log",
		"/Z/ghp/Dr/amcc/logPON/sweep_power_ratio_len4096x32_newlaser.log",
		"/Z/ghp/Dr/amcc/logPON/vpilogtodata.m",
		"/Z/ghp/Dr/amcc/logPON/sweep_ratio_20to50_len32x4096x32.log",
		"/Z/ghp/Dr/amcc/logAMCC/sweep_ratio_20to50_lpf_1to3_len4096x32.log",
		"/E/shovelhpwork/Dr/amcc/sweep_ratio_30to50.log",
		"/F/softwares/专业软件/Matlab2015a/matlab_crack/license_standalone.lic",
		"/Z/Tools/Linux/Matlab/Mathworks.Matlab.R2012a.UNIX.ISO-TBE/tbe.nfo",
		"/E/shovelhpwork/matlab/amcc/PON/SCFDE/Rx_SCFDE/Rx_SCFDE.m",
		"/E/shovelhpwork/matlab/amcc/PON/SCFDE/Rx_SCFDE/Frm_Sync.m",
		"/E/shovelhpwork/matlab/amcc/PON/SCFDE/AMCC/genrandidata.m",
		"/E/shovelhpwork/matlab/amcc/PON/SCFDE/AMCC/amccdecode.m"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"DZI"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12095,
						"regions":
						{
						},
						"selection":
						[
							[
								9017,
								9017
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5301.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "AppFunctions.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15251,
						"regions":
						{
						},
						"selection":
						[
							[
								7739,
								7739
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3779.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "isd9160newdemo.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 233.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
