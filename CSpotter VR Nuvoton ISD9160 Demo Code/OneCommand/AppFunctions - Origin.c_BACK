/*---------------------------------------------------------------------------------------------------------*/
/*																										   */
/* Copyright (c) Nuvoton Technology	Corp. All rights reserved.											   */
/*																										   */
/*---------------------------------------------------------------------------------------------------------*/

// ---------------------------------------------------------------------------------------------------------
//	Functions:
//		- Functions to handle main operations:
//			* Initiate application.
//			* Start audio playback.
//			* Stop  audio playback.
//			* Produce PCM data for audio playback.
//			* Start audio recording.
//			* Stop  audio recording.
//			* Use recorded data to do:
//				a. encoding
//				b. doing voice effect
//				c. write to storage
//				d. etc.
//		- The above functions use codes in "xxxApp" folder and "Utility" folder to complete necessary operations.
//
//	Reference "Readme.txt" for more information.
// ---------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include "App.h"
#include "MicSpk.h"
#include "AudioRom.h"
#include "PreLoad.h"
#include "VRModelsID.h"
#include "OneCommandAllBinID.h"
#include "AudioRes/Output/AudioRes_AudioInfo.h"

extern S_SPIFLASH_HANDLER g_sSpiFlash;
extern UINT32 SPIFlash_ReadDataCallback(void *pu8Buf, UINT32 u32StartAddr, UINT32 u32Count);
extern UINT8  SPIFlash_Initiate(void);

extern void PowerDown_Enter(void);
extern void PowerDown(void);
extern void PowerDown_Exit(void);

extern S_APP g_sApp;
extern volatile UINT8 g_u8AppCtrl;

//---------------------------------------------------------------------------------------------------------
// Function: App_Initiate
//
// Description:
//	Initiate application.
//
// Argument:
//
// Return:
//
//---------------------------------------------------------------------------------------------------------
void App_Initiate(void)
{

	g_u8AppCtrl = APPCTRL_NO_ACTION;
	
	// Initiate the audio playback.
	Playback_Initiate();
	
	// Initiate the buffer control from MIC.
	MicGetApp_Initiate(&g_sApp.sMicGetApp);
	
	#if ( ULTRAIO_FW_CURVE_ENABLE )
	NVIC_SetPriority(ULTRAIO_TMR_IRQ, 0);
	#endif	
		
	// $$----------------------------------------------------------------$$
	//  Read merged file header information
	// --------------------------------------------------------------------
	//  TOTAL BIN CNT | Reserved 4 bytes |BIN0001 ADDR  |  BIN0001 DATALEN | 
	//  BIN0002 ADDR  | BIN0002 DATALEN |  BIN0003 ADDR |  BIN0003 DATALEN | 
	//  .........
	// --------------------------------------------------------------------
	// Read audio start address in SPIFlash
	SPIFlash_Read(&g_sSpiFlash, 8 + (8*AudioRes_AudioInfoMerge), (PUINT8) &g_sApp.u32AudioStartAddr, 4);
	// Read VR model start address in SPIFlash
	SPIFlash_Read(&g_sSpiFlash, 8 + (8*VRModelsMerged), (PUINT8) &g_sApp.u32VRModelStartAddr, 4);
	
	// Preload VR model
	// Default VR Model
	g_sApp.u8VRModelID = N575C_Demo_Group1_pack;

	if (PreLoad_VRBin((UINT32)VRCMD_START_ADDR, VRCMD_MAX_SIZE, g_sApp.u32VRModelStartAddr, g_sApp.u8VRModelID) == FALSE)
		while(1);
	
	//??VR bin ???		//Must adjust parameter with model amount			  
	if (VROneCmdApp_UnpackBin(&g_sApp.sVRapp, (uint32_t)VRCMD_START_ADDR) == 0)		   
		while(1);
	
	// Light stand by(PA14) led for initial ready().
//	OUT3(0);
	
	// Light (PA12) led for load VR model group1.
	OUT1(0);
	OUT2(1);
	
	App_StartRecognize();
}

//---------------------------------------------------------------------------------------------------------
// Function: App_StartRecognize
//
// Description:                                                                                           
//	Start to recognize.
//
// Return:
// 	FALSE: fail
//	TRUE:  success
//---------------------------------------------------------------------------------------------------------
BOOL App_StartRecognize(void)
{
	// Initiate the voice recognition.
	if (VROneCmdApp_Initiate(&g_sApp.sVRapp) == NULL )
		return FALSE;

	// Start mic
	MicGetApp_StartRec(&g_sApp.sMicGetApp, VRONECMDAPP_SAMPLE_RATE);

	// Turn on (PA14) LED. Indicating in the period of getting ADC samples for recognizing command.
	OUT3(0);
		
	return TRUE;
}

//---------------------------------------------------------------------------------------------------------
// Function: App_StartRecognize
//
// Description:                                                                                           
//	Stop to recognize.
//
// Return:
// 	void
//---------------------------------------------------------------------------------------------------------
void App_StopRecognize(void)
{
	MicGetApp_StopRec(&g_sApp.sMicGetApp);
	VROneCmdApp_UnInitiate(&g_sApp.sVRapp);
}

//---------------------------------------------------------------------------------------------------------
// Function: App_StartPlayMIDI
//
// Description:                                                                                           
//	Start MD4 audio playback.
//
// Return:
// 	FALSE: fail
//	TRUE:  success
//---------------------------------------------------------------------------------------------------------
BOOL App_StartPlay(UINT32 u32PlayID)
{
	// Start MD4 decode lib to decode MD4 file stored from current audio id and played from audio channel 0.
	// The ROM file is placed on SPI Flash address "g_sApp.u32AudioStartAddr".
	// And decode the first frame of PCMs.
	MD4App_DecodeInitiate(&g_sApp.asMD4App, NULL, 0);
	
	if ( MD4App_DecodeStartPlayByID(&g_sApp.asMD4App, u32PlayID, g_sApp.u32AudioStartAddr, 0) == FALSE )
		return FALSE;
	
	// Start Ultraio Timer & HW pwm for UltraIO curve output
	ULTRAIO_START();
	
	// Start to playback audio. 
	Playback_StartPlay();
	
	return TRUE;	
}

//---------------------------------------------------------------------------------------------------------
// Description:                                                                                            
//	Stop audio playback.                                                                             
//
// Return:
// 	FALSE: fail
//	TRUE:  success
//---------------------------------------------------------------------------------------------------------
BOOL App_StopPlay(void)
{
	// Stop speaker.
	Playback_StopPlay();
	
	MD4App_DecodeStopPlay(&g_sApp.asMD4App);
	
	// Stop Ultraio Timer & HW pwm.
	ULTRAIO_STOP();
	
	return TRUE;
}

//---------------------------------------------------------------------------------------------------------
// Function: App_Process
//
// Description:                                                                                            
//   Produce PCM data for audio playback; Voice recognition
//
// Return:
//	void                                 
//---------------------------------------------------------------------------------------------------------
void App_Process(void)
{	
	INT16 *pi16BuffAddr;
	INT32 i32ID = 0;
	UINT16 u16GetSamples = 0;
	
	u16GetSamples = MicGetApp_ProcessRec(&g_sApp.sMicGetApp, (UINT32 **)&pi16BuffAddr);
	
	//VR application needs 7.2~7.8ms computing in 10ms (160 samples) interval,
	//Other application must work completely at 2.2~2.8ms if cooperation with VR.
	if ((i32ID = VROneCmdApp_GetCMDID(&g_sApp.sVRapp, pi16BuffAddr, u16GetSamples)) > 0)
	{
		// Turn off (PA14) LED. Indicating below period for responsing scenario, cannot recognize command.
		OUT3(1);
		
		switch (g_sApp.u8VRModelID)
		{
			case N575C_Demo_Group1_pack:
			{
				// Stop mic before play response
				MicGetApp_StopRec(&g_sApp.sMicGetApp);
				if ((i32ID == 1) || (i32ID == 2))	
				{
					//Command: robot
					//Response: I'm here.
					App_StartPlay(IAMHERE);			
				}else if ((i32ID == 3) || (i32ID == 4) || (i32ID == 5) || (i32ID == 6))	 
				{
					//Command: How are you
					//Response: I'm fine, thanks you.
					App_StartPlay(IAMFINE);			
				}else if ((i32ID == 7) || (i32ID == 8))		
				{
					//Command: I love you
					//Response: So sweet, honey
					App_StartPlay(SOSWEET);		
				}else if ((i32ID == 9) || (i32ID == 10))	
				{
					//Command: Go to sleep
					//Response: Ok
					App_StartPlay(OK);
				}else if ((i32ID == 11) || (i32ID == 12))	
				{
					//Command: Hide and seek
					//Response: You can't find me
					App_StartPlay(YOUCANTFINDME);
				}else if ((i32ID == 13) || (i32ID == 14)) 
				{
					//Command: Sing a song
					//Response: Singing "ADCDEFG...."
					App_StartPlay(SONGA_P);
				}else if (i32ID == 15) 
				{
					//Command: Merry Christmas
					//Response: I want to give you a gift. We wish you. . .
					App_StartPlay(IWANTTOGIVE);
				}	
				break;
			}
			case N575C_Demo_Group2_pack:
			{
				// Stop mic before play response
				MicGetApp_StopRec(&g_sApp.sMicGetApp);
				if ((i32ID == 1) || (i32ID == 2))	
				{
					//Command: Happy New Year
					//Response: We both wear new clothes.
					App_StartPlay(WEBOTHWEAR);			
				}else if ((i32ID == 3) || (i32ID == 4))	 
				{
					//Command: Good morning
					//Response: Good morning.
					App_StartPlay(GOODMORNING);			
				}else if ((i32ID == 5) || (i32ID == 6))		
				{
					//Command: Good night
					//Response: Good night and have a sweet dream
					App_StartPlay(GOODNIGHT);		
				}else if ((i32ID == 7) || (i32ID == 8))	
				{
					//Command: Thank you
					//Response: You are welcome
					App_StartPlay(YOUAREWELCOME);
				}else if (i32ID == 9)	
				{
					//Command: Shake hand
					//Response: Nice to meet you
					App_StartPlay(NICETOMEET);
				}else if (i32ID == 10) 
				{
					//Command: Wake up
					//Response: No, I'm so tired
					App_StartPlay(NOIAMSOTIRED);
				}else if ((i32ID == 11) || (i32ID == 12)) 
				{
					//Command: Take a nap
					//Response: Please call me later
					App_StartPlay(PLZCALLME);
				}	
				break;
			}
			default:
				break;
		}
	}
	
	// Play response
	if( g_u8AppCtrl&APPCTRL_PLAY )
	{
		if (MD4App_DecodeProcess(&g_sApp.asMD4App) == FALSE )
		{
			// Stop to decode audio data from ROM file for stoping to play audio codec. 
			// Remove audio codec output buffer from play channel.
			App_StopPlay();

			// Start mic after play response
			MicGetApp_StartRec(&g_sApp.sMicGetApp, VRONECMDAPP_SAMPLE_RATE);

			// Turn on (PA14) LED. Indicating in the period of getting ADC samples for recognizing command.
			OUT3(0);
		}
	}
}

//---------------------------------------------------------------------------------------------------------
// Function: App_PowerDown
//
// Description:                                                                                            
//   Process flow of power-down for application. Include,
//   1. App_PowerDownProcess:Pre-process befor entering power-down.
//   2. PowerDown:Power down base process(PowerDown.c).
//   3. App_WakeUpProcess:Post-process after exiting power-down.
//   User could disable or enable this flow from flag(POWERDOWN_ENABLE) in ConfigApp.h.
//---------------------------------------------------------------------------------------------------------
void App_PowerDown(void)
{
	App_StopRecognize();
	App_StopPlay();
	
	#if(POWERDOWN_ENABLE)
	PowerDown_Enter();
	PowerDown();
	PowerDown_Exit();
	#endif
	// Initiate the audio playback.
	Playback_Initiate();
	
	// Initiate the buffer control from MIC.
	MicGetApp_Initiate(&g_sApp.sMicGetApp);
	
	App_StartRecognize();
	
	if (g_sApp.u8VRModelID == N575C_Demo_Group1_pack)
		OUT1(0);
	else
		OUT2(0);
}
