{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*---------------------------------------------------------------------------------------------------------*/\n/*                                                                                                         */\n/* Copyright(c) Nuvoton Technology Corp. All rights reserved.                                              */\n/*                                                                                                         */\n/*---------------------------------------------------------------------------------------------------------*/\t\t \n\n// ---------------------------------------------------------------------------------------------------------\n//\tFunctions:\n//\t\t- System clock configuration.\n//\t\t- Keypad configuration.\n//\t\t- SPI Flash configuration.\n//\t\t- Speaker configuration.\n//\t\t- MIC configuration.\n//\t\t- Output pin configuration.\n//\t\t- UltraIO configuration.\n//\t\t- Application Initiation.\n//\t\t- Processing loop:\n//\t\t\t* Codec processing(use functions in \"AppFunctions.c\").\n//\t\t\t* Voice effect processing(use functions in \"AppFunctions.c\").\n//\t\t\t* Keypad check and execution actions(use functions in \"InputKeyActions.c\").\n//\t\t\t* Etc.\n//\t\n//\tReference \"Readme.txt\" for more information.\n// ---------------------------------------------------------------------------------------------------------\n\n#include <stdio.h>\n#include \"App.h\"\n#include \"Framework.h\"\n#include \"Keypad.h\"\n#include \"ConfigSysClk.h\"\n#include \"MicSpk.h\"\n\n#include \"AudioRes/Output/AudioRes_AudioInfo.h\"\n\n//#include \"N5162S.h\"\n//#include \"gpio_spi.h\"\n\n#if( !defined(__CHIP_SERIES__) )\n#error \"Please update SDS version >= v5.0.\"\n#endif\n\n// SPI flash handler.\nS_SPIFLASH_HANDLER g_sSpiFlash;\n\n// Application control.\nvolatile UINT8 g_u8AppCtrl;\n\n// Application handler.\nS_APP g_sApp;\n\nstatic UART_T\t*g_pUART = UART0;                              /////modify 20170804\n\n\nuart_type ap_uart0;\npwm_type pwm0;\npwm_type pwm1;\n\nUINT8 SPIFlash_Initiate(void)\n{ \n\tUINT16 ui16Temp;\n\tUINT32 ui32Temp;\n\tUINT32 u32Count;\n\n\t// SPI0: GPA1=SSB00, GPA2=SCLK0, GPA3=MISO0, GPA4=MOSI0 \n\tSYS->GPA_MFP  = \n\t\t(SYS->GPA_MFP & (~(SYS_GPA_MFP_PA0MFP_Msk|SYS_GPA_MFP_PA1MFP_Msk|SYS_GPA_MFP_PA2MFP_Msk|SYS_GPA_MFP_PA3MFP_Msk)) )\n\t\t| (SYS_GPA_MFP_PA0MFP_SPI_MOSI0|SYS_GPA_MFP_PA1MFP_SPI_SCLK|SYS_GPA_MFP_PA2MFP_SPI_SSB0|SYS_GPA_MFP_PA3MFP_SPI_MISO0);\t\n\t\n\t// Reset IP module\n\tCLK_EnableModuleClock(SPI0_MODULE);\n\tSYS_ResetModule(SPI0_RST);\n\tSPIFlash_Open(SPI0, SPI_SS0, SPI0_CLOCK, &g_sSpiFlash );\n\n\t// Make SPI flash leave power down mode if some where or some time had made it entring power down mode\n\tSPIFlash_PowerDown(&g_sSpiFlash, FALSE);\n\t\n\t// Check SPI flash is ready for accessing\n\tu32Count = ui32Temp = 0;\n\twhile(u32Count!=100)\n\t{\n\t\tSPIFlash_Read(&g_sSpiFlash, 0, (PUINT8) &ui16Temp, 2);\n\t\tif ( ui32Temp != (UINT32)ui16Temp )\n\t\t{\n\t\t\tui32Temp = (UINT32)ui16Temp;\n\t\t\tu32Count = 0;\n\t\t}\n\t\telse\n\t\t\tu32Count++;\n\t}\n\n\t// The following code can be remove to save code if the flash size is not necessary for this application\n\tSPIFlash_GetChipInfo(&g_sSpiFlash);\n\tif (g_sSpiFlash.u32FlashSize == 0)\n\t\treturn 0;\n\t\n\t// The above code can be remove to save code if the flash size is not necessary for this application\n\treturn 1;\n}\n\nvoid UART_Init(void)\n{\n   /* Init UART to 115200-8n1 for print message */\n\tSYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA8MFP_Msk) ) | SYS_GPA_MFP_PA8MFP_UART_TX;\n\tSYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA9MFP_Msk) ) | SYS_GPA_MFP_PA9MFP_UART_RX;\n\t\n\tCLK_EnableModuleClock(UART_MODULE);//使能UART外设时钟\n\t\n  UART_Open(UART0, 115200);\n\tUART_ClearIntFlag(UART0,UART_INTSTS_BUFERRINT_Msk);\n\tUART_ClearIntFlag(UART0,UART_INTSTS_RLSINT_Msk);\n\tUART_ClearIntFlag(UART0,UART_INTSTS_MODEMINT_Msk);\n\tUART_ClearIntFlag(UART0,UART_INTSTS_RXTOINT_Msk);\n\tUART0->INTEN |=(1<<0); //使能接收中断\n  NVIC_EnableIRQ(UART0_IRQn);                      ////modify 20170804 \n}\n\nvoid pwm_init(void)\n{\n\tpwm0.period =200;\n\tpwm0.Duty =50;\n\tpwm0.rate = 30000;\n\t\n\tCLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0CH01SEL_HCLK, 0);\n\tCLK_EnableModuleClock(PWM0_MODULE);\n\tSYS_ResetModule(PWM0_RST);\n\t\n\t/* Set GPA multi-function pins for PWM0 Channel0 */\n\tSYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA12MFP_Msk) ) | SYS_GPA_MFP_PA12MFP_PWM0CH0;\n\t//set PWM0 channel 0 output configuration */\n  PWM_ConfigOutputChannel(PWM0, PWM_CH0, pwm0.rate, pwm0.Duty);\n  //Enable PWM Output path for PWM0 channel 0 */\n  PWM_EnableOutput(PWM0, 0x1);\n\t// Enable PWM channel 0 period interrupt\n  PWM0->INTEN = PWM_INTEN_PIEN0_Msk;\n  NVIC_EnableIRQ(PWM0_IRQn);\n    \n  PWM_Start(PWM0, 0x00);\n}\n\nvoid pwm_init_1(void)\n{\n\tpwm1.period =200;\n\tpwm1.Duty =50;\n\tpwm1.rate = 30000;\n\t\n\tCLK_SetModuleClock(PWM1_MODULE, CLK_CLKSEL1_PWM1CH01SEL_HCLK, 0);\n\tCLK_EnableModuleClock(PWM1_MODULE);\n\tSYS_ResetModule(PWM1_RST);\n\t\n\t/* Set GPA multi-function pins for PWM0 Channel0 */\n\tSYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA12MFP_Msk) ) | SYS_GPA_MFP_PA12MFP_PWM1CH0;\n\t//set PWM0 channel 0 output configuration */\n  PWM_ConfigOutputChannel(PWM1, PWM_CH1, pwm1.rate, pwm1.Duty);\n  //Enable PWM Output path for PWM0 channel 0 */\n  PWM_EnableOutput(PWM1, 0x1);\n\t// Enable PWM channel 0 period interrupt\n  PWM1->INTEN = PWM_INTEN_PIEN0_Msk;\n  NVIC_EnableIRQ(PWM1_IRQn);\n    \n  PWM_Start(PWM1, 0x00);\n}\n\nvoid time_init(void)\n{\n\tCLK_EnableModuleClock(TMR0_MODULE);  //使能time0外设时钟\n\tCLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HCLK, 0);   /////modify 20170804\n\tTIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 1000);\n\tNVIC_EnableIRQ(TMR0_IRQn);\n\tTIMER_Start(TIMER0);\n\tTIMER_EnableInt(TIMER0);\n\t\n}\n\nuint16_t vr_time=0;\nuint16_t main_init_time=2000;\nuint8_t spk_sta=0;\nuint16_t PB_PIN_STA=0;\nvoid TMR0_IRQHandler(void)\n{\n\tstatic uint8_t time_10ms=0;\n\n\tstatic uint16_t tt=0;\n\tstatic uint8_t ll=0;\n\tif(pwm0.Breath_light)\n\t{\n\t\ttt++;\n\t\tif(tt>10)\n\t\t{\n\t\t\ttt =0;\n\t\t\tif(ll==0)\n\t\t\t{\n\t\t\t\tpwm0.Duty ++;\n\t\t\t\tif((pwm0.Duty)>= pwm0.period) ll=1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(pwm0.Duty)\tpwm0.Duty--;\n\t\t\t\telse ll=0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(time_10ms)\ttime_10ms--;\n\telse\n\t{\n\t\ttime_10ms=10;\n\t\t\n\t\tPB_PIN_STA <<=1;\n\t\tif(((PB->PIN)&(1<<6))==0)\tPB_PIN_STA+=1;\n\t\t\n\t\tif (PB_PIN_STA==0xfF00)\tspk_sta++;\n\t}\n\t\n\tif(ap_uart0.uart_rx_time)\tap_uart0.uart_rx_time --;\n    //printf(\"Timer IRQ handler test #%d/3.\\n\", ++u8Counter );\n    TIMER_ClearIntFlag(TIMER0);\t\n\tif(vr_time)\tvr_time--;\n}\n\nvoid UART0_IRQHandler(void)   ////modify 20170804\n{\n\tuint32_t  u32IntStatus;\n\tu32IntStatus= UART0->INTSTS;\n\t\nif(u32IntStatus & (1<<0))\t//接收中断\n\t{\n\t\tap_uart0.uart_rx_data[ap_uart0.uart_rx_len] = UART0->DAT;\n\t\tif((ap_uart0.uart_rx_len+1) <UART_DA)\tap_uart0.uart_rx_len ++;\t//预防越界\n\t\t\n\t\tap_uart0.uart_rx_time = UART_TT;\n\t}\n\telse if(u32IntStatus & (1<<1))\t//发送缓冲空中断\n\t{\n\t\tUART0->INTEN &= ~(1<<1);     /////THREIEN\n\t\tif(ap_uart0.uart_tx_len)\n\t\t{\n\t\t\tUART0->DAT= ap_uart0.uart_tx_data[ap_uart0.uart_tx_per]  ;\n\t\t\tap_uart0.uart_tx_len--;\n\t\t\tap_uart0.uart_tx_per ++;\n\t\t\tUART0->INTEN |=(1<<1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tap_uart0.uart_tx_per =0;\n\t\t\tUART0->INTEN &= ~(1<<1);\t\t//发送完毕，关闭发送中断\n\t\t\t//UART0->INTEN |=(1<<1);\n\t\t}\n\t}\n\n} \n\nvoid uart_send(uint8_t *dara, uint16_t len)\n{\n\tuint16_t ii;\n\tUART0->INTEN |=(1<<1);\n\tfor(ii=0; ii<len; ii++)\n\t{\n\t\tap_uart0.uart_tx_data[ii] = *dara++;\n\t}\n\tap_uart0.uart_tx_len =len;\n\tif(ap_uart0.uart_tx_len==0)\treturn;\n\twhile((g_pUART->FIFOSTS &(1<<22)) == 0)\t;\n\tg_pUART->DAT= ap_uart0.uart_tx_data[0];//发送\n\tap_uart0.uart_tx_per++;\n\tap_uart0.uart_tx_len --;\n\tUART0->INTEN |=(1<<1);\t//打开发送中断\n}\n\n\nvoid uart_rev_task(void)\n{\n\tif((ap_uart0.uart_rx_time==0)&&(ap_uart0.uart_rx_len))//有接收到数据\n\t{\n\n\t\t//uart_send(ap_uart0.uart_rx_data\t, ap_uart0.uart_rx_len);\t//发送接收到的数据\n\n\t\tap_uart0.uart_rx_len =0;\n\t}\n}\n\n\n\nvoid PWM0_IRQHandler(void)\n{\n    // Update PWM0 channel 0 period and duty\n    PWM_SET_CNR(PWM0, PWM_CH0, pwm0.period);\n    PWM_SET_CMR(PWM0, PWM_CH0, pwm0.Duty);\n    // Clear channel 0 period interrupt flag\n    PWM_ClearIntFlag(PWM0, 0);\n}\n\n\n\nuint8_t spk_add=0;\nuint8_t key_spk;\nuint8_t io_aa;\n//---------------------------------------------------------------------------------------------------------\n// Main Function                                                           \n//---------------------------------------------------------------------------------------------------------\nINT32 main()\n{\n\n\tSYSCLK_INITIATE();\t\t\t\t\t\t\t\t// Configure CPU clock source and operation clock frequency.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The configuration functions are in \"ConfigSysClk.h\"\n\n\tCLK_EnableLDO(CLK_LDOSEL_3_3V);\t\t// Enable interl 3.3 LDO.\n\n\tif (! SPIFlash_Initiate())\t\t\t\t// Initiate SPI interface and checking flows for accessing SPI flash.\n\twhile(1); \t\t\t\t\t\t\t\t\t\t\t\t// loop here for easy debug\n\t\n\n\tOUTPUTPIN_INITIATE();\t\t\t\t\t\t\t// Initiate output pin configuration.\n//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The output pins configurations are defined in \"ConfigIO.h\".\n\n\tULTRAIO_INITIATE();\t\t\t\t\t\t\t\t// Initiate ultraio output configurations.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The ultraio output pin configurations are defined in \"ConfigUltraIO.h\"\n\n\tKEYPAD_INITIATE();\t\t\t\t\t\t\t\t// Initiate keypad configurations including direct trigger key and matrix key\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The keypad configurations are defined in \"ConfigIO.h\".\n\n\tPDMA_INITIATE();\t\t\t\t\t\t\t\t\t// Initiate PDMA.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// After initiation, the PDMA engine clock NVIC are enabled.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Use PdmaCtrl_Open() to set PDMA service channel for desired IP.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Use PdmaCtrl_Start() to trigger PDMA operation.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Reference \"PdmaCtrl.h\" for PDMA related APIs.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// PDMA_INITIATE() must be call before SPK_INITIATE() and MIC_INITIATE(), if open MIC or speaker.\n\n\tSPK_INITIATE();\t\t\t\t\t\t\t\t\t\t// Initiate speaker including pop-sound canceling.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// After initiation, the APU is paused.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Use SPK_Resume(0) to start APU operation.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Reference \"MicSpk.h\" for speaker related APIs.\n\n\tMIC_INITIATE();\t\t\t\t\t\t\t\t\t\t// Initiate MIC.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// After initiation, the ADC is paused.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Use ADC_Resume() to start ADC operation.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Reference \"MicSpk.h\" for MIC related APIs.\n\n\n\tUART_Init();   \n\ttime_init();\n\tpwm_init();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n//\t\t\t\n\tApp_Initiate();\t\t\t\t\t\t\t\t\t\t// Initiate application for audio decode.\n\t\n//\tGPIO_SetMode(PA, 12, GPIO_MODE_OUTPUT);\n\t\n\t//App_StartPlay(0);\n\tprintf(\"\\n\\n\");\n\tprintf(\"INIT Finished!\\n\");\n\twhile (1)\n\t{\n\t\t\n\t\tApp_Process();\t//语音识别\n\t\tuart_rev_task();\t//uart任务\n\t\t\n\t\t\n\t\t//if((g_u8AppCtrl & APPCTRL_PLAY)==0)\t App_StartPlay(1);\t//判断当前是否播放完毕\n\t\t\n\t\t\n//\t\tTRIGGER_KEY_CHECK();\t\t// Check and execute direct trigger key actions defined in \"InputKeyActions.c\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Default trigger key handler is \"Default_KeyHandler()\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The trigger key configurations are defined in \"ConfigIO.h\".\n\t\t\n//\t\tMATRIX_KEY_CHECK();\t\t\t// Check and execute matrix key actions defined in \"InputKeyActions.c\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Default matrix key handler is \"Default_KeyHandler()\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The matrix key configurations are defined in \"ConfigIO.h\".\n\t}\n\n}\n\n",
			"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/main.c",
			"file_size": 11358,
			"file_write_time": 131845036235372716,
			"settings":
			{
				"buffer_size": 10906,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AppFunctions.c",
			"settings":
			{
				"buffer_size": 12573,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/work/pkunew/山丘语音/ISD9160 SDK1/SDK1/Sample/TestOK/Multi_Light_Tone/src/Light.c",
			"settings":
			{
				"buffer_size": 4656,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/work/pkunew/山丘语音/ISD9160ForOpenHamtaro/NuvotonPlatform_Keil/Src/Driver/DrvGPIO.c",
			"settings":
			{
				"buffer_size": 61712,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/src/gpio.c",
			"settings":
			{
				"buffer_size": 2641,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/inc/gpio.h",
			"settings":
			{
				"buffer_size": 11487,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Framework/src/ConfigIO.c",
			"settings":
			{
				"buffer_size": 3410,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: remopa",
				"Package Control: Remove Package"
			],
			[
				"Package Control: inspa",
				"Package Control: Install Package"
			],
			[
				"Package Control: remo",
				"Package Control: Remove Package"
			],
			[
				"Package Control: repa",
				"Package Control: Remove Package"
			],
			[
				"Package Control: removpa",
				"Package Control: Remove Package"
			],
			[
				"Package Control: removepa",
				"Package Control: Remove Package"
			],
			[
				"pagins",
				"Package Control: Install Package"
			],
			[
				"Package Control: upg",
				"Package Control: Upgrade Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/shovelhp/Documents/GitHub/isd9160vr",
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code",
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library"
	],
	"file_history":
	[
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Device/Nuvoton/ISD9100/Include/ISD9100.h",
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Device/Nuvoton/ISD9100/Source/system_ISD9100.c",
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Framework/inc/UltraIO.h",
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/ConfigIO.h",
		"/D/work/pkunew/山丘语音/ISD9160 SDK1/SDK1/Sample/TestOK/Multi_Light_Tone/src/PlayTone.c",
		"/D/work/pkunew/山丘语音/ISD9160 SDK1/SDK1/Sample/TestOK/LED_4SoftwarePWM/4LED.c",
		"/D/work/pkunew/山丘语音/ISD9160 SDK1/SDK1/Sample/TestOK/LightDemo_RecordG722__3VP_Touch-1pad/src/Light.c",
		"/D/work/pkunew/山丘语音/ISD9160 SDK1/SDK1/Sample/TestOK/LightDemo_RecordG722__3VP_Touch-1pad/src/main.c",
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Framework/inc/Framework.h",
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Storage/inc/SPIFlash.h",
		"/C/Users/shovelhp/AppData/Roaming/Sublime Text 3/Packages/CTags/CTags.sublime-settings",
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/App.h.dump",
		"/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/App.h",
		"/C/Users/shovelhp/AppData/Roaming/Sublime Merge/Packages/User/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 41.2
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"DZEN"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"is_init_dirty_state": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10906,
						"regions":
						{
						},
						"selection":
						[
							[
								8554,
								8554
							]
						],
						"settings":
						{
							"in_converting": true,
							"is_init_dirty_state": false,
							"origin_encoding": "GB2312",
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5672.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/OneCommand/AppFunctions.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12573,
						"regions":
						{
						},
						"selection":
						[
							[
								11019,
								11033
							]
						],
						"settings":
						{
							"in_converting": true,
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"viewport_position":
							[
								0.0,
								5777.0
							]
						},
						"translation.x": 0.0,
						"translation.y": 6619.2,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/D/work/pkunew/山丘语音/ISD9160 SDK1/SDK1/Sample/TestOK/Multi_Light_Tone/src/Light.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4656,
						"regions":
						{
						},
						"selection":
						[
							[
								313,
								313
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/D/work/pkunew/山丘语音/ISD9160ForOpenHamtaro/NuvotonPlatform_Keil/Src/Driver/DrvGPIO.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 61712,
						"regions":
						{
						},
						"selection":
						[
							[
								30436,
								30436
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9569.2,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/src/gpio.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2641,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 801.2,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/StdDriver/inc/gpio.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11487,
						"regions":
						{
						},
						"selection":
						[
							[
								10529,
								10512
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3704.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/D/shovelhp/Documents/GitHub/isd9160vr/CSpotter VR Nuvoton ISD9160 Demo Code/Library/Framework/src/ConfigIO.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3410,
						"regions":
						{
						},
						"selection":
						[
							[
								3099,
								3077
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1094.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "isd9160vr.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 262.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
